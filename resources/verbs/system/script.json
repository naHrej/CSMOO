{
  "name": "script",
  "aliases": "; th think",
  "description": "Execute C# script code directly with access to Player, This, and all Builtins methods",
  "code": [
    "// Check if any code was provided",
    "if (Args.Count == 0 || string.Join(\" \", Args).Trim().Length == 0)",
    "{",
    "    notify(Player, \"Usage: script { C# code here }\");",
    "    notify(Player, \"Aliases: ;, th, think\");",
    "    notify(Player, \"Available variables: Player, This, Args, Input, Verb\");",
    "    notify(Player, \"All Builtins methods accept either objectId strings or dynamic objects\");",
    "    notify(Player, \"Example: ; notify(Player, $\\\"Hello {Player.Name}!\\\"); \");",
    "    notify(Player, \"Example: ; SetProperty(This, \\\"test\\\", \\\"value\\\"); \");",
    "    return;",
    "}",
    "",
    "// Join all arguments to reconstruct the script code",
    "var scriptCode = string.Join(\" \", Args);",
    "",
    "try",
    "{",
    "    // Execute the script using the Builtins helper method for consistent environment",
    "    var result = Builtins.ExecuteScript(scriptCode, Player, CommandProcessor, This, Input);",
    "    ",
    "    // Only show non-null, non-empty results",
    "    if (!string.IsNullOrEmpty(result) && result != \"null\")",
    "    {",
    "        notify(Player, $\"Script result: {result}\");",
    "    }",
    "    else",
    "    {",
    "        notify(Player, \"Script executed successfully.\");",
    "    }",
    "}",
    "catch (Exception ex)",
    "{",
    "    notify(Player, $\"Script error: {ex.Message}\");",
    "}"
  ]
}
