{
  "name": "lambda-demo",
  "aliases": "lambdademo demo-lambda",
  "pattern": "",
  "description": "Quick demo of working lambda expressions",
  "permissions": "public",
  "code": [
    "// Quick lambda demo",
    "notify(Player, \"🚀 Lambda Demo - Working Examples\");",
    "notify(Player, \"═══════════════════════════════════\");",
    "",
    "// Example 1: Players with lambda",
    "var onlineCount = GetAllPlayers().Count(p => p.IsOnline);",
    "notify(Player, $\"Online players: {onlineCount}\");",
    "",
    "// Example 2: Objects with extension methods (solves dynamic dispatch issue)",
    "if (Player.location != null)",
    "{",
    "    var objectCount = GetObjectsInLocation(Player.location).CountObjects(obj => obj.visible == true);",
    "    notify(Player, $\"Visible objects here: {objectCount}\");",
    "    ",
    "    // Get names of visible objects",
    "    var names = GetObjectsInLocation(Player.location)",
    "        .WhereObjects(obj => obj.visible == true)",
    "        .SelectObjects(obj => obj.name ?? \\\"unnamed\\\")",
    "        .ToList();",
    "    ",
    "    if (names.Any())",
    "    {",
    "        notify(Player, $\\\"Object names: {string.Join(\\\", \\\", names)}\\\");",
    "    }",
    "}",
    "",
    "// Example 3: Chaining operations",
    "var adminNames = GetAllPlayers()",
    "    .Where(p => IsAdmin(p))",
    "    .Select(p => p.name)",
    "    .OrderBy(name => name)",
    "    .ToList();",
    "",
    "if (adminNames.Any())",
    "{",
    "    notify(Player, $\"Admins: {string.Join(\", \", adminNames)}\");",
    "}",
    "else",
    "{",
    "    notify(Player, \"No admins found\");",
    "}",
    "",
    "notify(Player, \"✅ Lambda expressions are working!\");"
  ],
  "createdBy": "system",
  "createdAt": "2025-07-19T00:00:00Z"
}
