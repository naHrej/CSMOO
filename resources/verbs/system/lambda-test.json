{
  "name": "lambda-test",
  "aliases": "lambdatest test-lambda",
  "pattern": "",
  "description": "Test lambda expression support in the scripting engine",
  "permissions": "public",
  "code": [
    "// Lambda expressions test",
    "notify(Player, \"🧪 Lambda Expressions Test\");",
    "notify(Player, \"═══════════════════════════\");",
    "notify(Player, \"\");",
    "",
    "// Test 1: Simple lambda with Where clause",
    "notify(Player, \"🔍 Test 1: Finding online players\");",
    "var onlinePlayers = GetAllPlayers().Where(p => p.IsOnline).ToList();",
    "notify(Player, $\"Found {onlinePlayers.Count} online players\");",
    "foreach (var player in onlinePlayers)",
    "{",
    "    notify(Player, $\"  - {player.name}\");",
    "}",
    "notify(Player, \"\");",
    "",
    "// Test 2: Lambda with Select (Transform)",
    "notify(Player, \"✨ Test 2: Getting player names\");",
    "var playerNames = GetAllPlayers().Select(p => p.name).ToList();",
    "notify(Player, $\"All player names: {string.Join(\", \", playerNames)}\");",
    "notify(Player, \"\");",
    "",
    "// Test 3: Complex lambda with multiple conditions",
    "notify(Player, \"🎯 Test 3: Advanced filtering\");",
    "var adminPlayers = GetAllPlayers()",
    "    .Where(p => p.IsOnline && IsAdmin(p))",
    "    .Select(p => p.name)",
    "    .ToList();",
    "if (adminPlayers.Any())",
    "{",
    "    notify(Player, $\"Online admins: {string.Join(\", \", adminPlayers)}\");",
    "}",
    "else",
    "{",
    "    notify(Player, \"No online admins found\");",
    "}",
    "notify(Player, \"\");",
    "",
    "// Test 4: Using new lambda-friendly helper methods",
    "notify(Player, \"🚀 Test 4: Helper methods with lambdas\");",
    "var adminCount = CountPlayers(p => IsAdmin(p));",
    "notify(Player, $\"Total admin count: {adminCount}\");",
    "",
    "var hasOnlineAdmin = AnyPlayer(p => p.IsOnline && IsAdmin(p));",
    "notify(Player, $\"Has online admin: {hasOnlineAdmin}\");",
    "notify(Player, \"\");",
    "",
    "// Test 5: Objects with lambdas - FIXED!",
    "if (Player.location != null)",
    "{",
    "    notify(Player, \"📦 Test 5: Objects with lambda extensions\");",
    "    var roomObjects = GetObjectsInLocation(Player.location);",
    "    ",
    "    // Method 1: Using extension methods (recommended)",
    "    var visibleObjects = roomObjects.WhereObjects(obj => obj.visible == true).ToList();",
    "    notify(Player, $\"Visible objects (extension method): {visibleObjects.Count}\");",
    "    ",
    "    // Method 2: Using strongly-typed helpers",
    "    var visibleObjects2 = FilterObjects(roomObjects, obj => obj.visible == true);",
    "    notify(Player, $\"Visible objects (helper method): {visibleObjects2.Count}\");",
    "    ",
    "    // Method 3: Get names using extension method",
    "    var objectNames = roomObjects.WhereObjects(obj => obj.visible == true)",
    "                                 .SelectObjects(obj => obj.name ?? \\\"unnamed\\\")",
    "                                 .ToList();",
    "    ",
    "    foreach (var name in objectNames)",
    "    {",
    "        notify(Player, $\\\"  - {name}\\\");",
    "    }",
    "    ",
    "    // Method 4: Count using extension method",
    "    var itemCount = roomObjects.CountObjects(obj => obj.gettable == true);",
    "    notify(Player, $\\\"Gettable items: {itemCount}\\\");",
    "}",
    "notify(Player, \"\");",
    "",
    "notify(Player, \"✅ Lambda test complete!\");",
    "notify(Player, \"💡 You can now use lambda expressions like:\");",
    "notify(Player, \"   GetObjectsInLocation(roomId).WhereObjects(obj => obj.visible)\");",
    "notify(Player, \"   GetAllPlayers().WherePlayers(p => p.IsOnline).ForEachPlayers(p => notify(p, \\\"Hello!\\\"))\");",
    "notify(Player, \"   roomObjects.SelectObjects(obj => obj.name).OrderBy(name => name)\");",
    "notify(Player, \"   objects.CountObjects(obj => obj.type == \\\"weapon\\\")\");",
    "notify(Player, \"\");",
    "",
    "// Test 6: Advanced lambda chaining",
    "notify(Player, \"🔗 Test 6: Advanced lambda chaining\");",
    "if (Player.location != null)",
    "{",
    "    var analysis = GetObjectsInLocation(Player.location)",
    "        .WhereObjects(obj => obj.visible == true)",
    "        .SelectObjects(obj => new { Name = obj.name ?? \\\"unnamed\\\", Type = obj.type ?? \\\"unknown\\\" })",
    "        .GroupBy(item => item.Type)",
    "        .Select(group => $\\\"{group.Key}: {group.Count()} items\\\")",
    "        .ToList();",
    "    ",
    "    notify(Player, \\\"Object analysis:\\\");",
    "    foreach (var result in analysis)",
    "    {",
    "        notify(Player, $\\\"  {result}\\\");",
    "    }",
    "}"
  ],
  "createdBy": "system",
  "createdAt": "2025-07-19T00:00:00Z"
}
