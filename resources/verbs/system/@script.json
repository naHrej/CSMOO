{
  "name": "@script",
  "description": "Multi-line script execution with programming-style input",
  "code": [
    "// Check if any code was provided",
    "if (Args.Count == 0 || string.Join(\" \", Args).Trim().Length == 0)",
    "{",
    "    notify(player, \"@script - Multi-line script execution\");",
    "    notify(player, \"Usage: @script\");",
    "    notify(player, \"Then enter your C# code on multiple lines.\");",
    "    notify(player, \"Type '.' on a line by itself to execute.\");",
    "    notify(player, \"Type '.abort' to cancel.\");",
    "    notify(player, \"Available variables: player, me, here, this, Args, Input, Verb\");",
    "    return;",
    "}",
    "",
    "// Initialize multi-line script mode",
    "// We'll use the session to store the script state",
    "var sessionGuid = player.SessionGuid?.ToString() ?? \"\";",
    "if (string.IsNullOrEmpty(sessionGuid))",
    "{",
    "    notify(player, \"Error: Could not determine session for multi-line input.\");",
    "    return;",
    "}",
    "",
    "// Store script mode state in player properties temporarily",
    "// This is a simple approach - a more sophisticated system might use session storage",
    "Builtins.SetProperty(player.Id, \"_scriptMode\", \"true\");",
    "Builtins.SetProperty(player.Id, \"_scriptCode\", \"\");",
    "",
    "notify(player, \"Multi-line script mode active.\");",
    "notify(player, \"Enter your C# code. Available variables: player, me, here, this\");",
    "notify(player, \"Type '.' on a line by itself to execute, or '.abort' to cancel.\");",
    "",
    "// Note: The actual line-by-line input handling would need to be implemented",
    "// in the command processor to check for script mode and handle input accordingly",
    "// For now, we'll show this as a placeholder that demonstrates the concept",
    "notify(player, \"[Note: Full multi-line input handling requires command processor integration]\");"
  ]
}

