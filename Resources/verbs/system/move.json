{
  "name": "move",
  "aliases": "",
  "pattern": "*",
  "description": "Dynamic movement - try any direction",
  "code": [
    "// Dynamic movement verb - handles any direction word",
    "if (Args.Count != 1)",
    "{",
    "    return; // Let other verbs handle multi-word commands",
    "}",
    "",
    "var direction = Args[0].ToLower();",
    "var currentLocation = here;",
    "if (currentLocation == null)",
    "{",
    "    return; // Let other verbs handle this",
    "}",
    "",
    "// Get all exits from current room",
    "var exits = Builtins.GetExits(currentLocation.ObjectId);",
    "if (exits.Count == 0)",
    "{",
    "    return; // No exits, let other verbs handle this word",
    "}",
    "",
    "// Common direction mappings",
    "var directionMap = new Dictionary<string, string> {",
    "    {\"n\", \"north\"}, {\"s\", \"south\"}, {\"e\", \"east\"}, {\"w\", \"west\"},",
    "    {\"ne\", \"northeast\"}, {\"nw\", \"northwest\"}, {\"se\", \"southeast\"}, {\"sw\", \"southwest\"},",
    "    {\"u\", \"up\"}, {\"d\", \"down\"}",
    "};",
    "",
    "// Normalize direction (convert abbreviations to full names)",
    "var normalizedDirection = directionMap.ContainsKey(direction) ? directionMap[direction] : direction;",
    "",
    "// Check if the word matches any exit direction",
    "GameObject matchingExit = null;",
    "foreach (var e in exits)",
    "{",
    "    var exitDirection = Builtins.GetProperty(e.Id, \"direction\")?.ToLower();",
    "    if (exitDirection == direction || exitDirection == normalizedDirection)",
    "    {",
    "        matchingExit = e;",
    "        break;",
    "    }",
    "}",
    "",
    "if (matchingExit == null)",
    "{",
    "    return; // Not a direction, let other verbs handle this",
    "}",
    "",
    "// Found a matching exit, move the player",
    "var destination = Builtins.GetProperty(matchingExit.Id, \"destination\");",
    "if (destination == null)",
    "{",
    "    notify(player, \"That exit doesn't lead anywhere.\");",
    "    return;",
    "}",
    "",
    "// Move the player",
    "if (Builtins.MoveObject(player.Id, destination))",
    "{",
    "    // Update player location in both database and in-memory object",
    "    player.Location = destination;",
    "    var exitDirection = Builtins.GetProperty(matchingExit.Id, \"direction\") ?? normalizedDirection;",
    "    notify(player, $\"You go {exitDirection}.\");",
    "    Builtins.ShowRoom();",
    "}",
    "else",
    "{",
    "    notify(player, \"You can't go that way.\");",
    "}"
  ]
}

