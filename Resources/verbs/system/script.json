{
  "name": "script",
  "aliases": "; th think",
  "description": "Execute C# script code directly with access to player, me, here, and this",
  "code": [
    "// Check if any code was provided",
    "if (Args.Count == 0 || string.Join(\" \", Args).Trim().Length == 0)",
    "{",
    "    Builtins.Notify(player, \"Usage: script { C# code here }\");",
    "    Builtins.Notify(player, \"Aliases: ;, th, think\");",
    "    Builtins.Notify(player, \"Available variables: player, me, here, this, Args, Input, Verb\");",
    "    Builtins.Notify(player, \"Example: ; Builtins.Notify(player, $\\\"Hello {player.Name}!\\\"); \");",
    "    return;",
    "}",
    "",
    "// Join all arguments to reconstruct the script code",
    "var scriptCode = string.Join(\" \", Args);",
    "",
    "try",
    "{",
    "    // Create a temporary verb to execute the script with proper globals",
    "    var tempVerb = new CSMOO.Server.Database.Models.Verb",
    "    {",
    "        Name = \"script\",",
    "        Code = scriptCode,",
    "        ObjectId = \"system\"",
    "    };",
    "    ",
    "    // Use the verb script engine for consistent behavior with other verbs",
    "    var verbEngine = new CSMOO.Server.Scripting.VerbScriptEngine();",
    "    var result = verbEngine.ExecuteVerb(tempVerb, Input, player, CommandProcessor, \"system\");",
    "    ",
    "    // Only show non-null, non-empty results",
    "    if (!string.IsNullOrEmpty(result) && result != \"null\")",
    "    {",
    "        Builtins.Notify(player, $\"Script result: {result}\");",
    "    }",
    "    else",
    "    {",
    "        Builtins.Notify(player, \"Script executed successfully.\");",
    "    }",
    "}",
    "catch (Exception ex)",
    "{",
    "    Builtins.Notify(player, $\"Script error: {ex.Message}\");",
    "}"
  ]
}
