{
  "name": "go",
  "aliases": "",
  "pattern": "*",
  "description": "Move in a direction",
  "code": [
    "// Smart go command - move in any available direction",
    "var currentLocation = here;",
    "if (currentLocation == null)",
    "{",
    "    notify(player, \"You are not in any location.\");",
    "    return;",
    "}",
    "",
    "if (Args.Count != 1)",
    "{",
    "    // Show available exits if no direction given",
    "    if (currentLocation != null)",
    "    {",
    "        var exits = Helpers.GetExitsFromRoom(currentLocation.ObjectId);",
    "        if (exits.Count == 0)",
    "        {",
    "            notify(player, \"There are no exits from here.\");",
    "        }",
    "        else",
    "        {",
    "            var exitNames = new List<string>();",
    "            foreach (var exit in exits)",
    "            {",
    "                var direction = Helpers.GetProperty(exit, \"direction\")?.AsString;",
    "                if (direction != null)",
    "                {",
    "                    exitNames.Add(direction);",
    "                }",
    "            }",
    "            notify(player, $\"Available exits: {string.Join(\", \", exitNames)}\");",
    "            notify(player, \"Usage: go <direction>\");",
    "        }",
    "    }",
    "    else",
    "    {",
    "        notify(player, \"Usage: go <direction>\");",
    "    }",
    "    return;",
    "}",
    "",
    "var direction = Args[0].ToLower();",
    "var exits = Helpers.GetExitsFromRoom(currentLocation.ObjectId);",
    "GameObject exit = null;",
    "foreach (var e in exits)",
    "{",
    "    var exitDirection = Helpers.GetProperty(e, \"direction\")?.AsString?.ToLower();",
    "    if (exitDirection == direction)",
    "    {",
    "        exit = e;",
    "        break;",
    "    }",
    "}",
    "",
    "if (exit == null)",
    "{",
    "    // Show available exits",
    "    var exitNames = new List<string>();",
    "    foreach (var exit in exits)",
    "    {",
    "        var direction = Helpers.GetProperty(exit, \"direction\")?.AsString;",
    "        if (direction != null)",
    "        {",
    "            exitNames.Add(direction);",
    "        }",
    "    }",
    "    if (exitNames.Count > 0)",
    "    {",
    "        notify(player, $\"There is no exit '{direction}'. Available exits: {string.Join(\", \", exitNames)}\");",
    "    }",
    "    else",
    "    {",
    "        notify(player, \"There are no exits from here.\");",
    "    }",
    "    return;",
    "}",
    "",
    "var destination = Helpers.GetProperty(exit, \"destination\")?.AsString;",
    "if (destination == null)",
    "{",
    "    notify(player, \"That exit doesn't lead anywhere.\");",
    "    return;",
    "}",
    "",
    "// Move the player",
    "if (Helpers.MoveObject(player, destination))",
    "{",
    "    // Update player location in both database and in-memory object",
    "    Helpers.UpdatePlayerLocation(player, destination);",
    "    notify(player, $\"You go {direction}.\");",
    "    Helpers.ShowRoom();",
    "}",
    "else",
    "{",
    "    notify(player, \"You can't go that way.\");",
    "}"
  ]
}
