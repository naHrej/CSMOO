{
  "name": "examine",
  "aliases": "ex exa",
  "pattern": "*",
  "description": "Examine an object in detail",
  "code": [
    "var targetName = Args.FirstOrDefault() ?? \"here\";",
    "var targetId = Helpers.ResolveObject(targetName);",
    "var targetPlayer = (Player)null;",
    "",
    "if (string.IsNullOrEmpty(targetId))",
    "{",
    "    notify(Player, $\"I don't see '{targetName}' here.\");",
    "    return;",
    "}",
    "",
    "// Check if target is a player",
    "if (Builtins.IsPlayerObject(targetId))",
    "{",
    "    targetPlayer = Builtins.FindPlayerById(targetId);",
    "}",
    "else",
    "{",
    "    // Check if object represents a player",
    "    targetPlayer = Builtins.GetPlayerFromObject(targetId);",
    "}",
    "",
    "// Get the target object for property access",
    "var target = Helpers.GetObject(targetId);",
    "if (target == null)",
    "{",
    "    notify(Player, $\"Cannot examine '{targetName}' - object not found.\");",
    "    return;",
    "}",
    "",
    "// Get basic properties using dynamic access",
    "var name = target.name ?? Builtins.GetObjectName(targetId);",
    "var shortDesc = target.shortDescription ?? \"\";",
    "var longDesc = target.longDescription ?? target.description ?? \"\";",
    "",
    "// Build the examination output",
    "var output = new StringBuilder();",
    "",
    "// Object name and short description",
    "if (!string.IsNullOrEmpty(shortDesc))",
    "{",
    "    output.AppendLine($\"{name} ({shortDesc})\");",
    "}",
    "else",
    "{",
    "    output.AppendLine(name);",
    "}",
    "",
    "// Long description",
    "if (!string.IsNullOrEmpty(longDesc))",
    "{",
    "    output.AppendLine(longDesc);",
    "}",
    "else",
    "{",
    "    output.AppendLine(\"You see nothing special.\");",
    "}",
    "",
    "// Show contents if it's a container",
    "var contents = Helpers.GetObjectsInLocation(targetId);",
    "if (contents.Any())",
    "{",
    "    output.AppendLine();",
    "    output.AppendLine(\"Contents:\");",
    "    foreach (var item in contents)",
    "    {",
    "        var itemName = item.name ?? \"unknown object\";",
    "        var itemShort = item.shortDescription ?? \"\";",
    "        var displayName = !string.IsNullOrEmpty(itemShort) ? $\"{itemName} ({itemShort})\" : itemName;",
    "        output.AppendLine($\"  {displayName}\");",
    "    }",
    "}",
    "",
    "// Administrative information for Admin/Moderator users",
    "if (Builtins.IsAdmin(Player) || Builtins.IsModerator(Player))",
    "{",
    "    output.AppendLine();",
    "    output.AppendLine(\"=== Administrative Information ===\");",
    "    var targetObject = Helpers.GetObject(targetId);",
    "    output.AppendLine($\"Object ID: {targetObject.id}\");",
    "    output.AppendLine($\"DB Reference: #{targetObject.dbRef}\");",
    "    ",
    "    // Show player flags if examining a player",
    "    if (targetPlayer != null)",
    "    {",
    "        var flags = Builtins.GetPlayerFlags(targetPlayer);",
    "        if (flags.Any())",
    "        {",
    "            output.AppendLine($\"Player Flags: {string.Join(\", \", flags)}\");",
    "        }",
    "        else",
    "        {",
    "            output.AppendLine(\"Player Flags: none\");",
    "        }",
    "    }",
    "    ",
    "    // Show object class",
    "    var objectClass = Builtins.GetObjectClass(targetId);",
    "    if (objectClass != null)",
    "    {",
    "        output.AppendLine($\"Class: {objectClass.Name}\");",
    "    }",
    "    ",
    "    // Show verbs",
    "    var verbs = Builtins.GetVerbsOnObject(targetId);",
    "    if (verbs.Any())",
    "    {",
    "        output.AppendLine(\"Verbs:\");",
    "        foreach (var verb in verbs.OrderBy(v => v.Name))",
    "        {",
    "            var verbInfo = $\"  {verb.Name}\";",
    "            if (!string.IsNullOrEmpty(verb.Aliases))",
    "            {",
    "                verbInfo += $\" ({verb.Aliases})\";",
    "            }",
    "            if (!string.IsNullOrEmpty(verb.Pattern))",
    "            {",
    "                verbInfo += $\" [{verb.Pattern}]\";",
    "            }",
    "            output.AppendLine(verbInfo);",
    "        }",
    "    }",
    "    else",
    "    {",
    "        output.AppendLine(\"Verbs: none\");",
    "    }",
    "    ",
    "    // Show functions",
    "    var functions = Builtins.GetFunctionsOnObject(targetId);",
    "    if (functions.Any())",
    "    {",
    "        output.AppendLine(\"Functions:\");",
    "        foreach (var func in functions.OrderBy(f => f.Name))",
    "        {",
    "            var paramString = string.Join(\", \", func.ParameterTypes.Zip(func.ParameterNames, (type, name) => $\"{type} {name}\"));",
    "            var funcInfo = $\"  {func.ReturnType} {func.Name}({paramString})\";",
    "            if (!string.IsNullOrEmpty(func.Description))",
    "            {",
    "                funcInfo += $\" - {func.Description}\";",
    "            }",
    "            output.AppendLine(funcInfo);",
    "        }",
    "    }",
    "    else",
    "    {",
    "        output.AppendLine(\"Functions: none\");",
    "    }",
    "    ",
    "    // Show properties",
    "    if (targetObject.Properties?.Any() == true)",
    "    {",
    "        output.AppendLine(\"Properties:\");",
    "        // Convert to list to avoid dynamic lambda dispatch issue",
    "        var propertiesList = new List<KeyValuePair<string, object>>();",
    "        foreach (var prop in targetObject.Properties)",
    "        {",
    "            propertiesList.Add(new KeyValuePair<string, object>(prop.Name, prop.Value));",
    "        }",
    "        // Now we can safely use OrderBy on the concrete list",
    "        foreach (var prop in propertiesList.OrderBy(p => p.Key))",
    "        {",
    "            var value = prop.Value?.ToString() ?? \"null\";",
    "            if (value.Length > 50)",
    "            {",
    "                value = value.Substring(0, 47) + \"...\";",
    "            }",
    "            output.AppendLine($\"  {prop.Key}: {value}\");",
    "        }",
    "    }",
    "    else",
    "    {",
    "        output.AppendLine(\"Properties: none\");",
    "    }",
    "}",
    "",
    "notify(Player, output.ToString().TrimEnd());"
  ]
}
