{
  "name": "list",
  "aliases": "@list",
  "pattern": "*",
  "description": "Show verb code (@list <object>:<verb>)",
  "code": [
    "// List command - show verb code (@list <object>:<verb>)",
    "if (Args.Count != 1)",
    "{",
    "    notify(player, \"Usage: list <object>:<verb>\");",
    "    return;",
    "}",
    "",
    "var verbSpec = Args[0];",
    "if (!verbSpec.Contains(':'))",
    "{",
    "    notify(player, \"Verb specification must be in format <object>:<verb>\");",
    "    return;",
    "}",
    "",
    "// Split from the right to handle class:Object:verb syntax",
    "var lastColonIndex = verbSpec.LastIndexOf(':');",
    "var objectName = verbSpec.Substring(0, lastColonIndex);",
    "var verbName = verbSpec.Substring(lastColonIndex + 1);",
    "",
    "var verbInfo = Helpers.GetVerbInfo(objectName, verbName);",
    "if (verbInfo == null)",
    "{",
    "    notify(player, $\"Object '{objectName}' or verb '{verbName}' not found.\");",
    "    return;",
    "}",
    "",
    "// Display verb information",
    "notify(player, $\"=== {verbInfo.ObjectName}:{verbInfo.VerbName} ===\");",
    "if (!string.IsNullOrEmpty(verbInfo.Aliases))",
    "    notify(player, $\"Aliases: {verbInfo.Aliases}\");",
    "if (!string.IsNullOrEmpty(verbInfo.Pattern))",
    "    notify(player, $\"Pattern: {verbInfo.Pattern}\");",
    "if (!string.IsNullOrEmpty(verbInfo.Description))",
    "    notify(player, $\"Description: {verbInfo.Description}\");",
    "",
    "notify(player, $\"Created by: {verbInfo.CreatedBy} on {verbInfo.CreatedAt:yyyy-MM-dd HH:mm}\");",
    "notify(player, \"Code:\");",
    "",
    "if (verbInfo.CodeLines.Length == 0)",
    "{",
    "    notify(player, \"  (no code)\");",
    "}",
    "else",
    "{",

    "    for (int i = 0; i < verbInfo.CodeLines.Length; i++)",
    "    {",
    "        notify(player, $\"{i + 1,3}: {verbInfo.CodeLines[i]}\");",
    "    }",
    "}"
  ]
}
