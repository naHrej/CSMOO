{
  "name": "list",
  "aliases": "@list",
  "pattern": "*",
  "description": "Show verb or function code (@list <object>:<verb> or @list <object>.<function>())",
  "code": [
    "// List command - show verb or function code",
    "if (Args.Count != 1)",
    "{",
    "    Builtins.Notify(Player, \"Usage: list <object>:<verb> or list <object>.<function>()\");",
    "    return;",
    "}",
    "",
    "var spec = Args[0];",
    "",
    "// Check if this is a function specification (object.function())",
    "if (spec.Contains('.') && spec.EndsWith(')'))",
    "{",
    "    // Remove the trailing ()",
    "    var specWithoutParens = spec.Substring(0, spec.Length - 2);",
    "    var dotIndex = specWithoutParens.LastIndexOf('.');",
    "    if (dotIndex == -1)",
    "    {",
    "        Builtins.Notify(Player, \"Function specification must be in format <object>.<function>()\");",
    "        return;",
    "    }",
    "    ",
    "    var objectName = specWithoutParens.Substring(0, dotIndex);",
    "    var functionName = specWithoutParens.Substring(dotIndex + 1);",
    "    ",
    "    var objectId = Builtins.ResolveObject(objectName, Player);",
    "    if (string.IsNullOrEmpty(objectId))",
    "    {",
    "        Builtins.Notify(Player, $\"Object '{objectName}' not found.\");",
    "        return;",
    "    }",
    "    ",
    "    // Use Builtins.FindFunction for proper inheritance resolution",
    "    var function = Builtins.FindFunction(objectId, functionName);",
    "    if (function == null)",
    "    {",
    "        Builtins.Notify(Player, $\"Function '{functionName}' not found on object '{objectName}'.\");",
    "        return;",
    "    }",
    "    ",
    "    // Display function information",
    "    var paramString = string.Join(\", \", function.ParameterTypes.Zip(function.ParameterNames, (type, name) => $\"{type} {name}\"));",
    "    Builtins.Notify(Player, $\"=== Function {function.Name} ===\");",
    "    Builtins.Notify(Player, $\"Signature: {function.ReturnType} {function.Name}({paramString})\");",
    "    Builtins.Notify(Player, $\"Object: {objectName}\");",
    "    Builtins.Notify(Player, $\"Permissions: {function.Permissions}\");",
    "    if (!string.IsNullOrEmpty(function.Description))",
    "        Builtins.Notify(Player, $\"Description: {function.Description}\");",
    "    ",
    "    Builtins.Notify(Player, $\"Created by: {function.CreatedBy} on {function.CreatedAt:yyyy-MM-dd HH:mm}\");",
    "    Builtins.Notify(Player, $\"Modified: {function.ModifiedAt:yyyy-MM-dd HH:mm}\");",
    "    Builtins.Notify(Player, \"Code:\");",
    "    ",
    "    if (string.IsNullOrEmpty(function.Code))",
    "    {",
    "        Builtins.Notify(Player, \"  (no code)\");",
    "    }",
    "    else",
    "    {",
    "        var lines = function.Code.Split('\\n');",
    "        for (int i = 0; i < lines.Length; i++)",
    "        {",
    "            Builtins.Notify(Player, $\"{i + 1,3}: {lines[i]}\");",
    "        }",
    "    }",
    "}",
    "// Check if this is the old f:object:function format (backward compatibility)",
    "else if (spec.StartsWith(\"f:\"))",
    "{",
    "    var functionSpec = spec.Substring(2); // Remove \\\"f:\\\" prefix",
    "    if (!functionSpec.Contains(':'))",
    "    {",
    "        Builtins.Notify(Player, \"Function specification must be in format f:<object>:<function>\");",
    "        return;",
    "    }",
    "    ",
    "    // Split from the right to handle class:Object:function syntax",
    "    var lastColonIndex = functionSpec.LastIndexOf(':');",
    "    var objectName = functionSpec.Substring(0, lastColonIndex);",
    "    var functionName = functionSpec.Substring(lastColonIndex + 1);",
    "    ",
    "    var objectId = Builtins.ResolveObject(objectName, Player);",
    "    if (string.IsNullOrEmpty(objectId))",
    "    {",
    "        Builtins.Notify(Player, $\"Object '{objectName}' not found.\");",
    "        return;",
    "    }",
    "    ",
    "    Builtins.Notify(Player, $\"Debug: Resolved '{objectName}' to object ID: {objectId}\");",
    "    ",
    "    // Use Builtins.FindFunction for proper inheritance resolution",
    "    var function = Builtins.FindFunction(objectId, functionName);",
    "    if (function == null)",
    "    {",
    "        // Show debug info about what functions exist",
    "        var allFunctions = Builtins.GetFunctionsOnObject(objectId);",
    "        Builtins.Notify(Player, $\"Debug: Found {allFunctions.Count} functions on object:\");",
    "        foreach (var f in allFunctions)",
    "        {",
    "            Builtins.Notify(Player, $\"  - {f.Name} (ID: {f.Id})\");",
    "        }",
    "        Builtins.Notify(Player, $\"Function '{functionName}' not found on object '{objectName}'.\");",
    "        return;",
    "    }",
    "    ",
    "    // Display function information",
    "    var paramString = string.Join(\", \", function.ParameterTypes.Zip(function.ParameterNames, (type, name) => $\"{type} {name}\"));",
    "    Builtins.Notify(Player, $\"=== Function {function.Name} ===\");",
    "    Builtins.Notify(Player, $\"Signature: {function.ReturnType} {function.Name}({paramString})\");",
    "    Builtins.Notify(Player, $\"Object: {objectName}\");",
    "    Builtins.Notify(Player, $\"Permissions: {function.Permissions}\");",
    "    if (!string.IsNullOrEmpty(function.Description))",
    "        Builtins.Notify(Player, $\"Description: {function.Description}\");",
    "    ",
    "    Builtins.Notify(Player, $\"Created by: {function.CreatedBy} on {function.CreatedAt:yyyy-MM-dd HH:mm}\");",
    "    Builtins.Notify(Player, $\"Modified: {function.ModifiedAt:yyyy-MM-dd HH:mm}\");",
    "    Builtins.Notify(Player, \"Code:\");",
    "    ",
    "    if (string.IsNullOrEmpty(function.Code))",
    "    {",
    "        Builtins.Notify(Player, \"  (no code)\");",
    "    }",
    "    else",
    "    {",
    "        var lines = function.Code.Split('\\n');",
    "        for (int i = 0; i < lines.Length; i++)",
    "        {",
    "            Builtins.Notify(Player, $\"{i + 1,3}: {lines[i]}\");",
    "        }",
    "    }",
    "}",
    "// Check if it's a verb specification (object:verb)",
    "else if (spec.Contains(':'))",
    "{",
    "    // Handle verbs (existing logic)",
    "    var lastColonIndex = spec.LastIndexOf(':');",
    "    var objectName = spec.Substring(0, lastColonIndex);",
    "    var verbName = spec.Substring(lastColonIndex + 1);",
    "    ",
    "    var verbInfo = Builtins.GetVerbInfo(objectName, verbName);",
    "    if (verbInfo == null)",
    "    {",
    "        Builtins.Notify(Player, $\"Object '{objectName}' or verb '{verbName}' not found.\");",
    "        return;",
    "    }",
    "    ",
    "    // Display verb information",
    "    Builtins.Notify(Player, $\"=== {verbInfo.ObjectName}:{verbInfo.VerbName} ===\");",
    "    if (!string.IsNullOrEmpty(verbInfo.Aliases))",
    "        Builtins.Notify(Player, $\"Aliases: {verbInfo.Aliases}\");",
    "    if (!string.IsNullOrEmpty(verbInfo.Pattern))",
    "        Builtins.Notify(Player, $\"Pattern: {verbInfo.Pattern}\");",
    "    if (!string.IsNullOrEmpty(verbInfo.Description))",
    "        Builtins.Notify(Player, $\"Description: {verbInfo.Description}\");",
    "    ",
    "    Builtins.Notify(Player, $\"Created by: {verbInfo.CreatedBy} on {verbInfo.CreatedAt:yyyy-MM-dd HH:mm}\");",
    "    Builtins.Notify(Player, \"Code:\");",
    "    ",
    "    if (verbInfo.CodeLines.Length == 0)",
    "    {",
    "        Builtins.Notify(Player, \"  (no code)\");",
    "    }",
    "    else",
    "    {",
    "        for (int i = 0; i < verbInfo.CodeLines.Length; i++)",
    "        {",
    "            Builtins.Notify(Player, $\"{i + 1,3}: {verbInfo.CodeLines[i]}\");",
    "        }",
    "    }",
    "}",
    "else",
    "{",
    "    Builtins.Notify(Player, \"Specification must be in format <object>:<verb> or <object>.<function>()\");",
    "}"
  ]
}
